/* ANALISE ATUAL

# Contextualização #

1. Sobre o Código Atual:
- Implementa uma heurística sequencial que simula um Multi Improvement
- Seleciona movimentos via programação dinâmica, mas viola independência
- O update2OptInternalMoves cria dependências entre movimentos
- Serve como baseline para comparações futuras

2. Variantes do Multi Improvement a Implementar:

a) MI Heurístico Completo em GPU:
- Avalia todos os O(n²) movimentos em paralelo na GPU
- Seleciona movimentos com ganhos positivos
- Não garante optimalidade do conjunto de movimentos
- Mais rápido mas pode perder soluções melhores
- Usa toda capacidade da GPU para avaliar movimentos simultaneamente

b) MI Heurístico Parcial em GPU:
- Implementa estratégia otimizada de divisão de threads
- Reduz threads ociosas conforme Fig. 5 do artigo de 2020
- Foca em regiões promissoras do espaço de busca
- Equilibra velocidade e qualidade das soluções
- Mais eficiente em termos de recursos computacionais

c) MI Exato:
- Implementa a solução completa do MMIP (Maximum Multi Improvement Problem)
- Constrói grafo de independência entre movimentos
- Resolve o problema do clique máximo ponderado
- Garante conjunto ótimo de movimentos independentes
- Mais lento mas encontra a melhor solução possível

3. Implementação CUDA (RTX 3060):

a) Estruturas de Dados:
- Arrays contíguos para solução e movimentos
- Estruturas para grafo de independência
- Buffers para resultados parciais
- Mecanismos de sincronização

b) Kernels Necessários:
- Avaliação paralela de movimentos
- Verificação de independência
- Seleção de movimentos
- Aplicação de movimentos

c) Otimizações:
- Uso eficiente de memória compartilhada
- Configuração adequada de grid/blocks
- Minimização de transferências host-device
- Coalescência de acessos à memória

4. Validação e Métricas:

a) Modelos de Convergência:
- f(x) = ae^(-bx) : decaimento exponencial básico
- f(x) = ax^(-b) : decaimento por lei de potência 
- f(x) = a·2^(-x/b) : decaimento por meia-vida

b) Aspectos a Validar:
- Independência real dos movimentos
- Qualidade das soluções
- Tempo de processamento
- Speedup vs CPU
- Comparação entre variantes

# Milestones #

1. Infraestrutura CUDA (2 semanas):
- Ambiente CUDA 12.6
- Estruturas de dados básicas
- Kernels fundamentais
- Testes iniciais

2. MI Heurístico (4 semanas):
- Versão Completa
  * Avaliação paralela total
  * Seleção de movimentos
  * Testes de correção
- Versão Parcial
  * Otimização de threads
  * Estratégias de poda
  * Análise de eficiência

3. MI Exato (6 semanas):
- Grafo de Independência
  * Estruturas de dados
  * Verificação de independência
- Clique Máximo
  * Algoritmo de resolução
  * Otimizações possíveis
- Validação
  * Prova de optimalidade
  * Análise de custos

4. Análise e Documentação (3 semanas):
- Implementação dos modelos de convergência
- Experimentos comparativos
- Análise estatística
- Documentação técnica
- Artigo científico

# Aspectos Técnicos Importantes #

1. Computacionais:
- CUDA 12.6
- RTX 3060 (6GB VRAM)
- 3584 CUDA cores
- Compute capability 8.6

2. Limitações:
- Memória GPU para instâncias grandes
- Complexidade do MMIP
- Overhead de transferências
- Sincronização de threads

3. Vantagens:
- Avaliação massivamente paralela
- Memória compartilhada rápida
- Hardware moderno
- Suporte a double precision

4. Desafios:
- Garantir independência real
- Otimizar ocupação da GPU
- Balancear qualidade/velocidade
- Validar optimalidade

*/


/* PRIMEIRA ANÁLISE (SUPERADA)

Analisando os dois artigos e o código fonte:

Artigos:
1. "A multi-improvement local search using dataflow and GPU to solve the minimum latency problem" (2020)
2. "Finding the Maximum Multi Improvement on neighborhood exploration" (2022)

Sobre Multi Improvement (MI):
- No artigo 1, o MI é descrito como uma técnica que permite aplicar vários movimentos independentes simultaneamente, em vez de um único movimento como em First Improvement (FI) ou Best Improvement (BI)
- No artigo 2, o MI é formalizado como o MMIP (Maximum Multi Improvement Problem), onde se busca encontrar o conjunto máximo de movimentos independentes que podem ser aplicados simultaneamente

No nosso código em `src/mainMITSP.cpp`, temos três buscas locais:

1. First Improvement (linhas ~119):
```cpp
static void FirstImprovement2Opt() {
   while (flag == 1) {
     for (i = 0; i < N - 1; i++) {
       for (j = i + 1; j < N; j++) {
         gain = TSPProblemData::N2OptGain(i, j);
         if (gain > 0) {
           N2Opt(i, j);  // Aplica um único movimento e recomeça
           flag = 1;
           break;
         }
       }
       if (flag == 1) break;
     }
   }
}
```

2. Best Improvement (linhas ~139):
```cpp
static void BestImprovement2Opt() {
   while (flag == 1) {
     for (i = 0; i < N - 1; i++) {
       for (j = i + 1; j < N; j++) {
         actual = TSPProblemData::N2OptGain(i, j);
         if (actual > best) {
           best = actual;
           bestI = i;
           bestJ = j;
         }
       }
     }
     if (bestI != -1) {
       N2Opt(bestI, bestJ);  // Aplica o melhor movimento único
     }
   }
}
```

3. Suposto Multi Improvement (linhas ~242):
```cpp
static void MultiImprovement2Opt() {
   while (1) {
     DynamicProgramming2Opt();
     if (!Selected2OptMoves.empty()) {
       cont++;
     } else break;

     for (w = Selected2OptMoves.begin(); w != Selected2OptMoves.end(); w++) {
       acc_gain = acc_gain + TSPProblemData::N2OptGain((*w).first, (*w).second);
       N2Opt((*w).first, (*w).second);
       update2OptInternalMoves(*w);
     }
   }
}
```

Analisando criticamente:
1. Não há evidência no código de que os movimentos em `Selected2OptMoves` são realmente independentes
2. Não há verificação de conflitos entre os movimentos antes de aplicá-los
3. O método `DynamicProgramming2Opt()` parece selecionar movimentos mas não garante independência
4. O método `update2OptInternalMoves()` atualiza movimentos posteriores, o que sugere dependência entre eles

Conclusão:
O código atual **não** implementa um verdadeiro Multi Improvement como descrito nos artigos porque:
1. Não garante a independência dos movimentos
2. Não verifica conflitos
3. Não maximiza o conjunto de movimentos independentes
4. Movimentos posteriores são afetados por movimentos anteriores (`update2OptInternalMoves`)

Para ser um verdadeiro MI, precisaríamos:
1. Identificar formalmente quando dois movimentos 2-opt são independentes
2. Implementar verificação de independência
3. Maximizar o conjunto de movimentos independentes que podem ser aplicados simultaneamente
4. Aplicar os movimentos verdadeiramente em paralelo sem atualizações intermediárias


# Contextualização #

1. Sobre Previsão de Término do MI:
- O artigo "Finding the Maximum Multi Improvement" de 2020 mostrou que o MI tem um padrão de convergência muito previsível
- A ideia é usar essa característica previsível como critério de parada em metaheurísticas
- Por exemplo: se sabemos que o MI tipicamente converge em X iterações com ganho Y, podemos parar antes se identificarmos esse padrão

2. Extensão para Simulated Annealing (SA):
- Ao invés de escolher um único movimento no SA tradicional
- Usar o conceito de MI para escolher vários movimentos independentes de uma vez (compound move)
- Isso poderia acelerar a convergência do SA

3. Implementação em GPU:
- O SA não é naturalmente paralelo, então ele sugere olhar para metaheurísticas mais adequadas para GPU
- Menciona "Systolic Search" como exemplo
- A ideia é combinar essas metaheurísticas paralelas com o conceito de MI

4. Extensões para outro problema:
- CVRP (Problema de Roteamento de Veículos com Capacidade)
- Usar hipergrafos para representar movimentos independentes nesse problema

5. Três variantes do MI para estudar:
- MI Exato: usando programação dinâmica (como no código atual)
- MI Heurístico Total: versão completa para GPU
- MI Heurístico Parcial: versão otimizada para GPU

Em termos práticos, o primeiro passo seria:
1. Analisar o padrão de convergência do MI no código atual
2. Implementar métricas para prever quando o MI vai parar
3. Usar essas métricas como critério de parada
4. Comparar as três variantes (Exato, Heurístico Total, Heurístico Parcial)

# Justificativa #

1. Contribuição Científica Clara:
- Propõe um novo critério de parada baseado no padrão de convergência do MI
- Integra MI com Simulated Annealing de forma inovadora
- Compara três variantes do MI (Exato, Heurístico Total e Parcial)

2. Metodologia Bem Definida:
- Parte do código existente do MI
- Analisa padrões de convergência
- Implementa e compara variantes
- Aplica ao problema do CVRP 

3. Experimentos Viáveis:
- Código base já implementado
- Métricas claras para comparação
- Possibilidade de validação estatística

4. Ineditismo:
- MI como critério de parada é uma abordagem nova
- Integração MI+SA é inovadora
- Comparação sistemática das três variantes

# Milestones #

1. Primeiro Milestone: Análise de Convergência
	- Implementar sistema de coleta de dados sobre a convergência do MI
	- Analisar estatisticamente os padrões de ganho por iteração
	- Documentar o comportamento típico até a convergência
	- Identificar padrões matemáticos que descrevem a convergência
	- Validar se os padrões se mantêm em diferentes instâncias do problema

2. Segundo Milestone: Critério de Parada Preditivo
	- Desenvolver fórmulas matemáticas para prever a convergência
	- Implementar critério de parada baseado nas previsões
	- Comparar tempo/qualidade usando critério tradicional vs. preditivo
	- Validar estatisticamente a eficácia do novo critério
	- Ajustar parâmetros do critério de parada para otimizar resultados

3. Terceiro Milestone: Integração com Simulated Annealing
	- Modificar o SA para aceitar múltiplos movimentos independentes
	- Implementar mecanismo de seleção de movimentos compatível com MI
	- Comparar SA tradicional vs. SA com movimentos compostos
	- Analisar impacto na convergência e qualidade das soluções
	- Documentar ganhos/perdas da abordagem híbrida

Cada milestone tem:
- Objetivos claros
- Métricas de sucesso mensuráveis 
- Resultados que podem ser validados estatisticamente
- Base para o próximo milestone
- Contribuição científica independente


Este escopo fornece:
- Uma contribuição científica clara
- Resultados mensuráveis
- Complexidade gerenciável
- Base para trabalhos futuros */